{"version":3,"sources":["Components/Settings.module.css","Components/Counter.module.css","Components/Common/UniversalButton.tsx","Components/Counter.tsx","Components/Settings.tsx","Components/reducer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","UniversalButton","props","Button","style","margin","variant","color","disabled","onClick","universalFunction","title","Counter","valueCondition","maxValue","startValue","inputValue","typeValue","value","className","c","containerStyle","inputErrorStyle","inputTextStyle","type","maxInputValue","buttonIncFunction","buttonResetFunction","displayOptions","setShowCounterAC","spanStyle","fontWeight","paddingLeft","Settings","s","onChange","addMaxValue","addStartValue","buttonOnClick","initialState","showCounter","SET_VALUE","SET_VALUE_RESET","SET_NEW_VALUE","SET_NEW_START_VALUE","SET_START_CURRENT_VALUE","SET_TYPE_VALUE_TRUE","SET_MAX_INPUT_VALUE","SET_MAX_VALUE","SET_SHOW_COUNTER","SET_DISPLAY_OPTIONS","reducer","state","action","newValue","currentValue","setTypeValueAC","setMaxInputValueAC","App","useReducer","dispatch","useEffect","valueAsString","localStorage","getItem","JSON","parse","setNewValueAC","setItem","stringify","settings","Paper","padding","backgroundColor","elevation","Grid","item","e","currentTarget","valueAsNumber","counter","justify","alignItems","container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,eAAiB,iCAAiC,gBAAkB,oC,mBCAtFD,EAAOC,QAAU,CAAC,eAAiB,gCAAgC,WAAa,4BAA4B,eAAiB,gCAAgC,gBAAkB,mC,6JCUlKC,EAAkB,SAACC,GAC5B,OACI,cAACC,EAAA,EAAD,CAAQC,MAAO,CAACC,OAAO,QAASC,QAAQ,YAAYC,MAAO,YAAcC,SAAUN,EAAMM,SAAUC,QAAS,WAAOP,EAAMQ,qBAAzH,SAAgJR,EAAMS,S,iBCGjJC,EAAU,SAACV,GACpB,IAAMW,EAAiBX,EAAMY,UAAYZ,EAAMa,YAAcb,EAAMa,WAAa,EAC1EC,EAAad,EAAMe,UAAaJ,EAAiB,mBAAqB,6BAA+BX,EAAMgB,MACjH,OAAO,sBAAKC,UAAWC,IAAEC,eAAlB,UACH,8BACI,uBAAOjB,MAAOF,EAAMY,WAAaZ,EAAMgB,MAAQ,CAACX,MAAM,WAAa,GAAIY,UAAWN,EAAiBO,IAAEE,gBAAkBF,IAAEG,eAAgBL,MAAOF,EACzIQ,KAAMtB,EAAMe,UAAY,OAAS,aAE5C,gCACI,cAAC,EAAD,CACIC,MAAOhB,EAAMgB,MACbP,MAAO,MACPH,SAAUN,EAAMgB,QAAUhB,EAAMuB,eAAiBvB,EAAMe,UACvDP,kBAAmBR,EAAMwB,oBAE7B,cAAC,EAAD,CACIlB,SAAUN,EAAMe,UAChBC,MAAOhB,EAAMgB,MACbP,MAAO,QACPD,kBAAmBR,EAAMyB,sBAE5BzB,EAAM0B,eAAiB,cAAC,EAAD,CACpBjB,MAAO,MACPD,kBAAmB,WAAOR,EAAM2B,kBAAiB,MAChD,Y,iBC5BXC,EAAiC,CAACvB,MAAM,UAAWwB,WAAW,OAAOC,YAAY,QAE1EC,EAAW,SAAC/B,GACrB,OAAO,gCACH,gCACI,sBAAME,MAAO0B,EAAb,uBAAwC,uBAAQX,UAAWjB,EAAMY,UAAYZ,EAAMa,WAAcmB,IAAEZ,gBAAkBY,IAAEX,eACzFL,MAAOhB,EAAMY,SAAUqB,SAAUjC,EAAMkC,YAAaZ,KAAK,cAE3F,gCACI,sBAAMpB,MAAO0B,EAAb,uBAAwC,uBACxCX,UAAWjB,EAAMa,YAAcb,EAAMY,UAAYZ,EAAMa,WAAa,EAAImB,IAAEZ,gBAAkBY,IAAEX,eAC9FL,MAAOhB,EAAMa,WAAYoB,SAAUjC,EAAMmC,cAAeb,KAAK,cAEjE,8BACI,cAAC,EAAD,CAAiBb,MAAO,MAAOH,SAAUN,EAAMY,UAAYZ,EAAMa,YAAcb,EAAMa,WAAa,EACjFL,kBAAmBR,EAAMoC,sB,uBCRzCC,EAAe,CACxBxB,WAAY,EACZG,MAAO,EACPJ,SAAU,EACVW,cAAe,EACfR,WAAW,EACXuB,aAAa,EACbZ,gBAAgB,GAEPa,EAAY,YACZC,EAAkB,kBAClBC,EAAgB,gBAChBC,EAAsB,sBACtBC,EAA0B,0BAC1BC,EAAsB,sBACtBC,EAAsB,sBACtBC,EAAgB,gBAChBC,EAAmB,mBACnBC,EAAsB,sBACtBC,EAAU,SAACC,EAAyBC,GAC7C,OAAQA,EAAO7B,MACX,KAAKiB,EACD,OAAO,2BACAW,GADP,IAEIlC,MAAOkC,EAAMlC,MAAQ,IAE7B,KAAKwB,EACD,OAAO,2BACAU,GADP,IAEIlC,MAAOkC,EAAMrC,aAErB,KAAK4B,EACD,OAAO,2BACAS,GADP,IAEIlC,MAAOmC,EAAOC,WAEtB,KAAKV,EACD,OAAO,2BACAQ,GADP,IAEIlC,MAAOmC,EAAOtC,aAEtB,KAAK8B,EACD,OAAO,2BACAO,GADP,IAEIrC,WAAYsC,EAAOE,eAE3B,KAAKT,EACD,OAAO,2BACAM,GADP,IAEInC,UAAWoC,EAAOnC,QAE1B,KAAK6B,EACD,OAAO,2BACAK,GADP,IAEI3B,cAAe4B,EAAOnC,QAE9B,KAAK8B,EACD,OAAO,2BACAI,GADP,IAEItC,SAAUuC,EAAOnC,QAEzB,KAAK+B,EACD,OAAO,2BACAG,GADP,IAEIZ,YAAaa,EAAOnC,QAE5B,KAAKgC,EACD,OAAO,2BACAE,GADP,IAEIxB,gBAAiBwB,EAAMxB,iBAE/B,QACI,OAAOwB,IAmBNI,EAAiB,SAACtC,GAC3B,MAAO,CAACM,KAAMsB,EAAqB5B,UAE1BuC,EAAqB,SAACvC,GAC/B,MAAO,CAACM,KAAMuB,EAAqB7B,UAK1BW,EAAmB,SAACX,GAE7B,MAAO,CAACM,KAAMyB,EAAkB/B,UCZrBwC,MAvFf,WAAgB,IAAD,EAEeC,qBAAWR,EAASZ,GAFnC,mBAEJa,EAFI,KAEGQ,EAFH,KAIXC,qBAAU,WACN,IAAMC,EAAgBC,aAAaC,QAAQ,gBAC3C,GAAIF,EAAe,CACf,IAAMR,EAAWW,KAAKC,MAAMJ,GAC5BF,EDuEiB,SAACN,GAC1B,MAAO,CAAC9B,KAAMmB,EAAeW,YCxEZa,CAAcb,OAE5B,IACHO,qBAAU,WACNE,aAAaK,QAAQ,eAAgBH,KAAKI,UAAUjB,EAAMlC,UAC3D,CAACkC,EAAMlC,QAEV,IA0BMoD,EAAW,cAACC,EAAA,EAAD,CAAOnE,MAAO,CAACoE,QAAS,SAAUnE,OAAQ,OAAQoE,gBAAiB,WAAYC,UAAW,EAA1F,SACb,cAACC,EAAA,EAAD,CAAMC,MAAI,EAAV,SACI,cAAC,EAAD,CAAU9D,SAAUsC,EAAMtC,SAAUC,WAAYqC,EAAMrC,WAAYqB,YAftD,SAACyC,GDkEI,IAAC3D,ECjEtB0C,GDiEsB1C,ECjEC2D,EAAEC,cAAcC,cDkEpC,CAACvD,KAAMwB,EAAe9B,WCjEzB0C,EAASJ,GAAe,KAcVnB,cAvBI,SAACwC,GDgEI,IAACtB,EC/DxBK,GD+DwBL,EC/DCsB,EAAEC,cAAcC,cDgEtC,CAACvD,KAAMqB,EAAyBU,kBC/DnCK,EAASJ,GAAe,IACpBqB,EAAEC,cAAcC,cAAgB,GAChCnB,EAASH,EAAmBL,EAAMlC,SAmBMoB,cAZ1B,WDkDQ,IAACvB,ECjD3B6C,GDiD2B7C,ECjDCqC,EAAMrC,WDkD/B,CAACS,KAAMoB,EAAqB7B,gBCjD/B6C,EAASH,EAAmBL,EAAMtC,WAClC8C,EAASJ,GAAe,IACxBI,EAAS/B,GAAkBuB,EAAMZ,eAQyCtB,MAAOkC,EAAMlC,YAGrF8D,EAAU,cAACT,EAAA,EAAD,CAAOnE,MAAO,CAACoE,QAAS,YAAanE,OAAQ,OAAQoE,gBAAiB,WAAYC,UAAW,EAA7F,SACZ,cAACC,EAAA,EAAD,CAAMC,MAAI,EAAV,SACI,cAAC,EAAD,CACInD,cAAe2B,EAAM3B,cACrBX,SAAUsC,EAAMtC,SAChBI,MAAOkC,EAAMlC,MAEbQ,kBAvCc,WACtBkC,ED0DG,CAACpC,KAAMiB,KCnBFd,oBArCgB,WACxBiC,ED0DG,CAACpC,KAAMkB,KCrBF3B,WAAYqC,EAAMrC,WAClBE,UAAWmC,EAAMnC,UACjBY,iBApBa,SAACX,GACtB0C,EAAS/B,EAAiBX,KAoBlBU,eAAgBwB,EAAMxB,qBAIlC,OACI,sBAAKT,UAAU,MAAf,UACI,cAAC,EAAD,CAAiBR,MAAO,SAAUD,kBAAmB,WDoC9B,IAACQ,ECnCpB0C,GDmCoB1C,GCnCUkC,EAAMxB,eDoCzC,CAACJ,KAAM0B,EAAqBhC,cClC3B,cAACyD,EAAA,EAAD,CAAMM,QAAS,SAAUC,WAAY,SAAUC,WAAS,EAAxD,SACK/B,EAAMxB,eAAiBwB,EAAMZ,YAC1B,qBAAKrB,UAAW,YAAhB,SACCmD,IAGD,qBAAKnD,UAAW,YAAhB,SACC6D,IAGD,sBAAK7D,UAAW,YAAhB,UACKmD,EACAU,WCxFVI,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bb0a3558.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputTextStyle\":\"Settings_inputTextStyle__171Je\",\"inputErrorStyle\":\"Settings_inputErrorStyle__3OnAB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerStyle\":\"Counter_containerStyle__3hnf-\",\"inputStyle\":\"Counter_inputStyle__wCONx\",\"inputTextStyle\":\"Counter_inputTextStyle__2QEOc\",\"inputErrorStyle\":\"Counter_inputErrorStyle__3Rdos\"};","import React from 'react';\r\nimport {Button} from \"@material-ui/core\";\r\n\r\ntype PropsType = {\r\n    value?:number\r\n    title:string\r\n    disabled?:boolean\r\n    universalFunction:() => void\r\n\r\n}\r\n\r\nexport const UniversalButton = (props:PropsType) => {\r\n    return (\r\n        <Button style={{margin:'10px'}} variant=\"contained\" color={'secondary'}  disabled={props.disabled} onClick={() => {props.universalFunction()}}>{props.title}</Button>\r\n    )\r\n}","import React from 'react';\r\nimport {UniversalButton} from \"./Common/UniversalButton\";\r\nimport c from './Counter.module.css'\r\n\r\ntype PropsType = {\r\n    value: number\r\n    maxValue:number\r\n    startValue: number\r\n    maxInputValue: number\r\n    buttonIncFunction: () => void\r\n    buttonResetFunction: () => void\r\n    typeValue:boolean\r\n    setShowCounterAC:(toggle:boolean) => void\r\n    displayOptions:boolean\r\n}\r\n\r\nexport const Counter = (props: PropsType) => {\r\n    const valueCondition = props.maxValue <= props.startValue || props.startValue < 0\r\n    const inputValue = props.typeValue  ? valueCondition ? 'incorrect value!' : 'enter values and press set' : props.value\r\n    return <div className={c.containerStyle}>\r\n        <div>\r\n            <input style={props.maxValue === props.value ? {color:'#F50057'} : {}} className={valueCondition ? c.inputErrorStyle : c.inputTextStyle} value={inputValue}\r\n                   type={props.typeValue ? \"text\" : \"number\"}/>\r\n        </div>\r\n        <div>\r\n            <UniversalButton\r\n                value={props.value}\r\n                title={'inc'}\r\n                disabled={props.value === props.maxInputValue || props.typeValue}\r\n                universalFunction={props.buttonIncFunction}\r\n            />\r\n            <UniversalButton\r\n                disabled={props.typeValue}\r\n                value={props.value}\r\n                title={'reset'}\r\n                universalFunction={props.buttonResetFunction}\r\n            />\r\n            {props.displayOptions ? <UniversalButton\r\n                title={'Set'}\r\n                universalFunction={() => {props.setShowCounterAC(true)}}\r\n            /> : null }\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n}","import React from 'react'\r\nimport {UniversalButton} from \"./Common/UniversalButton\";\r\nimport s from './Settings.module.css'\r\n\r\ntype PropsType = {\r\n    value:number,\r\n    maxValue: number,\r\n    startValue: number,\r\n    addMaxValue: (e: React.ChangeEvent<HTMLInputElement>) => void,\r\n    addStartValue: (e: React.ChangeEvent<HTMLInputElement>) => void,\r\n    buttonOnClick: () => void\r\n}\r\nconst spanStyle: React.CSSProperties = {color:'#F50057', fontWeight:'bold',paddingLeft:'18px'}\r\n\r\nexport const Settings = (props: PropsType) => {\r\n    return <div>\r\n        <div>\r\n            <span style={spanStyle}>Max value</span><input  className={props.maxValue <= props.startValue ?  s.inputErrorStyle : s.inputTextStyle}\r\n                                          value={props.maxValue} onChange={props.addMaxValue} type=\"number\"/>\r\n        </div>\r\n        <div>\r\n            <span style={spanStyle}>Min value</span><input\r\n            className={props.startValue >= props.maxValue || props.startValue < 0 ? s.inputErrorStyle : s.inputTextStyle}\r\n            value={props.startValue} onChange={props.addStartValue} type='number'/>\r\n        </div>\r\n        <div>\r\n            <UniversalButton title={'Set'} disabled={props.maxValue <= props.startValue || props.startValue < 0}\r\n                             universalFunction={props.buttonOnClick}/>\r\n        </div>\r\n    </div>\r\n}","type InitialStateType = {\r\n    startValue: number\r\n    value: number\r\n    maxValue: number\r\n    maxInputValue: number\r\n    typeValue: boolean\r\n    showCounter: boolean\r\n    displayOptions: boolean\r\n}\r\ntype ActionType = ReturnType<typeof setValueAC>\r\n    | ReturnType<typeof setNewValueAC>\r\n    | ReturnType<typeof setValueResetAC>\r\n    | ReturnType<typeof setNewStartValueAC>\r\n    | ReturnType<typeof setStartValueAC>\r\n    | ReturnType<typeof setTypeValueAC>\r\n    | ReturnType<typeof setMaxInputValueAC>\r\n    | ReturnType<typeof setMaxValueAC>\r\n    | ReturnType<typeof setShowCounterAC>\r\n    | ReturnType<typeof setDisplayOptionsAC>\r\nexport const initialState = {\r\n    startValue: 0,\r\n    value: 0,\r\n    maxValue: 5,\r\n    maxInputValue: 5,\r\n    typeValue: false,\r\n    showCounter: true,\r\n    displayOptions: true,\r\n}\r\nexport const SET_VALUE = 'SET_VALUE'\r\nexport const SET_VALUE_RESET = 'SET_VALUE_RESET'\r\nexport const SET_NEW_VALUE = 'SET_NEW_VALUE'\r\nexport const SET_NEW_START_VALUE = 'SET_NEW_START_VALUE'\r\nexport const SET_START_CURRENT_VALUE = 'SET_START_CURRENT_VALUE'\r\nexport const SET_TYPE_VALUE_TRUE = 'SET_TYPE_VALUE_TRUE'\r\nexport const SET_MAX_INPUT_VALUE = 'SET_MAX_INPUT_VALUE'\r\nexport const SET_MAX_VALUE = 'SET_MAX_VALUE'\r\nexport const SET_SHOW_COUNTER = 'SET_SHOW_COUNTER'\r\nexport const SET_DISPLAY_OPTIONS = 'SET_DISPLAY_OPTIONS'\r\nexport const reducer = (state: InitialStateType, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_VALUE:\r\n            return {\r\n                ...state,\r\n                value: state.value + 1\r\n            }\r\n        case SET_VALUE_RESET:\r\n            return {\r\n                ...state,\r\n                value: state.startValue\r\n            }\r\n        case SET_NEW_VALUE:\r\n            return {\r\n                ...state,\r\n                value: action.newValue\r\n            }\r\n        case SET_NEW_START_VALUE:\r\n            return {\r\n                ...state,\r\n                value: action.startValue\r\n            }\r\n        case SET_START_CURRENT_VALUE:\r\n            return {\r\n                ...state,\r\n                startValue: action.currentValue\r\n            }\r\n        case SET_TYPE_VALUE_TRUE:\r\n            return {\r\n                ...state,\r\n                typeValue: action.value\r\n            }\r\n        case SET_MAX_INPUT_VALUE:\r\n            return {\r\n                ...state,\r\n                maxInputValue: action.value\r\n            }\r\n        case SET_MAX_VALUE:\r\n            return {\r\n                ...state,\r\n                maxValue: action.value\r\n            }\r\n        case SET_SHOW_COUNTER:\r\n            return {\r\n                ...state,\r\n                showCounter: action.value\r\n            }\r\n        case SET_DISPLAY_OPTIONS:\r\n            return {\r\n                ...state,\r\n                displayOptions: !state.displayOptions\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setValueAC = () => {\r\n    return {type: SET_VALUE} as const\r\n}\r\nexport const setValueResetAC = () => {\r\n    return {type: SET_VALUE_RESET} as const\r\n}\r\nexport const setNewValueAC = (newValue: number) => {\r\n    return {type: SET_NEW_VALUE, newValue} as const\r\n}\r\nexport const setNewStartValueAC = (startValue: number) => {\r\n    return {type: SET_NEW_START_VALUE, startValue} as const\r\n}\r\nexport const setStartValueAC = (currentValue: number) => {\r\n    return {type: SET_START_CURRENT_VALUE, currentValue} as const\r\n}\r\nexport const setTypeValueAC = (value: boolean) => {\r\n    return {type: SET_TYPE_VALUE_TRUE, value} as const\r\n}\r\nexport const setMaxInputValueAC = (value: number) => {\r\n    return {type: SET_MAX_INPUT_VALUE, value} as const\r\n}\r\nexport const setMaxValueAC = (value: number) => {\r\n    return {type: SET_MAX_VALUE, value} as const\r\n}\r\nexport const setShowCounterAC = (value: boolean) => {\r\n    debugger\r\n    return {type: SET_SHOW_COUNTER, value} as const\r\n}\r\nexport const setDisplayOptionsAC = (value: boolean) => {\r\n    return {type: SET_DISPLAY_OPTIONS, value} as const\r\n}","import React, {useEffect, useReducer} from 'react';\nimport './App.css';\nimport {Counter} from \"./Components/Counter\";\nimport {Settings} from \"./Components/Settings\";\nimport {Grid, Paper} from \"@material-ui/core\";\nimport {UniversalButton} from \"./Components/Common/UniversalButton\";\nimport {\n    initialState,\n    reducer,\n    setDisplayOptionsAC,\n    setMaxInputValueAC,\n    setMaxValueAC,\n    setNewStartValueAC,\n    setNewValueAC,\n    setShowCounterAC,\n    setStartValueAC,\n    setTypeValueAC,\n    setValueAC,\n    setValueResetAC\n} from \"./Components/reducer\";\n\n\nfunction App() {\n\n    const [state, dispatch] = useReducer(reducer, initialState)\n\n    useEffect(() => {\n        const valueAsString = localStorage.getItem('counterValue')\n        if (valueAsString) {\n            const newValue = JSON.parse(valueAsString)\n            dispatch(setNewValueAC(newValue))\n        }\n    }, [])\n    useEffect(() => {\n        localStorage.setItem('counterValue', JSON.stringify(state.value))\n    }, [state.value])\n\n    const buttonIncFunction = () => {\n        dispatch(setValueAC())\n    }\n    const buttonResetFunction = () => {\n        dispatch(setValueResetAC())\n    }\n    const addStartValue = (e: React.ChangeEvent<HTMLInputElement>) => {\n        dispatch(setStartValueAC(e.currentTarget.valueAsNumber))\n        dispatch(setTypeValueAC(true))\n        if (e.currentTarget.valueAsNumber < 0) {\n            dispatch(setMaxInputValueAC(state.value))\n        }\n    }\n    const addMaxValue = (e: React.ChangeEvent<HTMLInputElement>) => {\n        dispatch(setMaxValueAC(e.currentTarget.valueAsNumber))\n        dispatch(setTypeValueAC(true))\n    }\n    const buttonOnClick = () => {\n        dispatch(setNewStartValueAC(state.startValue))\n        dispatch(setMaxInputValueAC(state.maxValue))\n        dispatch(setTypeValueAC(false))\n        dispatch(setShowCounterAC(!state.showCounter))\n    }\n    const setButtonOnClick = (value:boolean) => {\n        dispatch(setShowCounterAC(value))\n    }\n    const settings = <Paper style={{padding: '30px 0', margin: '30px', backgroundColor: '#90a4ae'}} elevation={3}>\n        <Grid item>\n            <Settings maxValue={state.maxValue} startValue={state.startValue} addMaxValue={addMaxValue}\n                      addStartValue={addStartValue} buttonOnClick={buttonOnClick} value={state.value}/>\n        </Grid>\n    </Paper>\n    const counter = <Paper style={{padding: '40px 20px', margin: '30px', backgroundColor: '#90a4ae'}} elevation={3}>\n        <Grid item>\n            <Counter\n                maxInputValue={state.maxInputValue}\n                maxValue={state.maxValue}\n                value={state.value}\n                // setValue={setValue}\n                buttonIncFunction={buttonIncFunction}\n                buttonResetFunction={buttonResetFunction}\n                startValue={state.startValue}\n                typeValue={state.typeValue}\n                setShowCounterAC={setButtonOnClick}\n                displayOptions={state.displayOptions}\n            />\n        </Grid>\n    </Paper>\n    return (\n        <div className=\"App\">\n            <UniversalButton title={'Change'} universalFunction={() => {\n                dispatch(setDisplayOptionsAC(!state.displayOptions))\n            }}/>\n            <Grid justify={'center'} alignItems={'center'} container>\n                {state.displayOptions ? state.showCounter ?\n                    <div className={'container'}>\n                    {settings}\n                    </div>\n                    :\n                    <div className={'container'}>\n                    {counter}\n                    </div>\n                    :\n                    <div className={'container'}>\n                        {settings}\n                        {counter}\n                    </div>}\n            </Grid>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}