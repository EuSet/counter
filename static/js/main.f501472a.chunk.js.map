{"version":3,"sources":["Settings.module.css","Counter.module.css","UniversalButton.tsx","Counter.tsx","Settings.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","UniversalButton","props","Button","style","margin","variant","color","disabled","onClick","universalFunction","title","Counter","valueCondition","maxValue","startValue","inputValue","typeValue","value","className","c","containerStyle","inputErrorStyle","inputTextStyle","type","maxInputValue","buttonIncFunction","buttonResetFunction","setShowCounter","spanStyle","fontWeight","paddingLeft","Settings","s","onChange","addMaxValue","addStartValue","buttonOnClick","App","useState","setStartValue","setValue","setMaxValue","setMaxInputValue","setTypeValue","showCounter","useEffect","valueAsString","localStorage","getItem","newValue","JSON","parse","setItem","stringify","Grid","justify","alignItems","height","container","Paper","padding","backgroundColor","elevation","item","e","currentTarget","valueAsNumber","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,eAAiB,iCAAiC,gBAAkB,oC,mBCAtFD,EAAOC,QAAU,CAAC,eAAiB,gCAAgC,WAAa,4BAA4B,eAAiB,gCAAgC,gBAAkB,mC,4JCUlKC,EAAkB,SAACC,GAC5B,OACI,cAACC,EAAA,EAAD,CAAQC,MAAO,CAACC,OAAO,QAASC,QAAQ,YAAYC,MAAO,YAAcC,SAAUN,EAAMM,SAAUC,QAAS,WAAOP,EAAMQ,qBAAzH,SAAgJR,EAAMS,S,iBCGjJC,EAAU,SAACV,GACpB,IAAMW,EAAiBX,EAAMY,UAAYZ,EAAMa,YAAcb,EAAMa,WAAa,EAC1EC,EAAad,EAAMe,UAAaJ,EAAiB,mBAAqB,6BAA+BX,EAAMgB,MACjH,OAAO,sBAAKC,UAAWC,IAAEC,eAAlB,UACH,8BACI,uBAAOjB,MAAOF,EAAMY,WAAaZ,EAAMgB,MAAQ,CAACX,MAAM,WAAa,GAAIY,UAAWN,EAAiBO,IAAEE,gBAAkBF,IAAEG,eAAgBL,MAAOF,EACzIQ,KAAMtB,EAAMe,UAAY,OAAS,aAE5C,gCACI,cAAC,EAAD,CACIC,MAAOhB,EAAMgB,MACbP,MAAO,MACPH,SAAUN,EAAMgB,QAAUhB,EAAMuB,eAAiBvB,EAAMe,UACvDP,kBAAmBR,EAAMwB,oBAE7B,cAAC,EAAD,CACIlB,SAAUN,EAAMe,UAChBC,MAAOhB,EAAMgB,MACbP,MAAO,QACPD,kBAAmBR,EAAMyB,sBAE7B,cAAC,EAAD,CACIhB,MAAO,MACPD,kBAAmB,WAAOR,EAAM0B,gBAAe,a,iBC3BzDC,EAAiC,CAACtB,MAAM,UAAWuB,WAAW,OAAOC,YAAY,QAE1EC,EAAW,SAAC9B,GACrB,OAAO,gCACH,gCACI,sBAAME,MAAOyB,EAAb,uBAAwC,uBAAQV,UAAWjB,EAAMY,UAAYZ,EAAMa,WAAckB,IAAEX,gBAAkBW,IAAEV,eACzFL,MAAOhB,EAAMY,SAAUoB,SAAUhC,EAAMiC,YAAaX,KAAK,cAE3F,gCACI,sBAAMpB,MAAOyB,EAAb,uBAAwC,uBACxCV,UAAWjB,EAAMa,YAAcb,EAAMY,UAAYZ,EAAMa,WAAa,EAAIkB,IAAEX,gBAAkBW,IAAEV,eAC9FL,MAAOhB,EAAMa,WAAYmB,SAAUhC,EAAMkC,cAAeZ,KAAK,cAEjE,8BACI,cAAC,EAAD,CAAiBb,MAAO,MAAOH,SAAUN,EAAMY,UAAYZ,EAAMa,YAAcb,EAAMa,WAAa,EACjFL,kBAAmBR,EAAMmC,sB,gBCuDvCC,MA3Ef,WAAgB,IAAD,EACyBC,mBAAiB,GAD1C,mBACJxB,EADI,KACQyB,EADR,OAEeD,mBAAiB,GAFhC,mBAEJrB,EAFI,KAEGuB,EAFH,OAGqBF,mBAAiB,GAHtC,mBAGJzB,EAHI,KAGM4B,EAHN,OAI+BH,mBAAiBzB,GAJhD,mBAIJW,EAJI,KAIWkB,EAJX,OAKuBJ,oBAAkB,GALzC,mBAKJtB,EALI,KAKO2B,EALP,OAM2BL,oBAAkB,GAN7C,mBAMJM,EANI,KAMSjB,EANT,KA2CX,OAnCAkB,qBAAU,WACN,IAAMC,EAAgBC,aAAaC,QAAQ,gBAC3C,GAAIF,EAAe,CACf,IAAMG,EAAWC,KAAKC,MAAML,GAC5BN,EAASS,MAEd,IACHJ,qBAAU,WACNE,aAAaK,QAAQ,eAAgBF,KAAKG,UAAUpC,MACrD,CAACA,IA2BA,qBAAKC,UAAU,MAAf,SACI,cAACoC,EAAA,EAAD,CAAMC,QAAS,SAAUC,WAAY,SAAUrD,MAAO,CAACsD,OAAQ,SAAUC,WAAS,EAAlF,SACKd,EACG,cAACe,EAAA,EAAD,CAAOxD,MAAO,CAACyD,QAAS,SAAUxD,OAAQ,OAAQyD,gBAAiB,WAAYC,UAAW,EAA1F,SACI,cAACR,EAAA,EAAD,CAAMS,MAAI,EAAV,SACI,cAAC,EAAD,CAAUlD,SAAUA,EAAUC,WAAYA,EAAYoB,YAjB1D,SAAC8B,GACjBvB,EAAYuB,EAAEC,cAAcC,eAC5BvB,GAAa,IAgBiBR,cAzBZ,SAAC6B,GACnBzB,EAAcyB,EAAEC,cAAcC,eAC9BvB,GAAa,GACTqB,EAAEC,cAAcC,cAAgB,GAChCxB,EAAiBzB,IAqBuCmB,cAd1C,WAClBI,EAAS1B,GACT4B,EAAiB7B,GACjB8B,GAAa,GACbhB,GAAgBiB,IAU0E3B,MAAOA,QAGnF,cAAC0C,EAAA,EAAD,CAAOxD,MAAO,CAACyD,QAAS,SAAUxD,OAAQ,OAAQyD,gBAAiB,WAAYC,UAAW,EAA1F,SACE,cAACR,EAAA,EAAD,CAAMS,MAAI,EAAV,SACI,cAAC,EAAD,CACIvC,cAAeA,EACfX,SAAUA,EACVI,MAAOA,EACPuB,SAAUA,EACVf,kBAzCF,WACtBe,EAASvB,EAAQ,IAyCOS,oBAvCA,WACxBc,EAAS1B,IAuCeA,WAAYA,EACZE,UAAWA,EACXW,eAAgBA,aCzDjCwC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f501472a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputTextStyle\":\"Settings_inputTextStyle__orbIU\",\"inputErrorStyle\":\"Settings_inputErrorStyle__tFura\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerStyle\":\"Counter_containerStyle__6pqin\",\"inputStyle\":\"Counter_inputStyle__4t1kq\",\"inputTextStyle\":\"Counter_inputTextStyle__3nJZy\",\"inputErrorStyle\":\"Counter_inputErrorStyle__RtIeI\"};","import React from 'react';\r\nimport {Button} from \"@material-ui/core\";\r\n\r\ntype PropsType = {\r\n    value?:number\r\n    title:string\r\n    disabled?:boolean\r\n    universalFunction:() => void\r\n\r\n}\r\n\r\nexport const UniversalButton = (props:PropsType) => {\r\n    return (\r\n        <Button style={{margin:'10px'}} variant=\"contained\" color={'secondary'}  disabled={props.disabled} onClick={() => {props.universalFunction()}}>{props.title}</Button>\r\n    )\r\n}","import React from 'react';\r\nimport {UniversalButton} from \"./UniversalButton\";\r\nimport c from './Counter.module.css'\r\n\r\ntype PropsType = {\r\n    value: number\r\n    maxValue:number\r\n    startValue: number\r\n    maxInputValue: number\r\n    setValue: (value: number) => void\r\n    buttonIncFunction: () => void\r\n    buttonResetFunction: () => void\r\n    typeValue:boolean\r\n    setShowCounter:(toggle:boolean) => void\r\n}\r\n\r\nexport const Counter = (props: PropsType) => {\r\n    const valueCondition = props.maxValue <= props.startValue || props.startValue < 0\r\n    const inputValue = props.typeValue  ? valueCondition ? 'incorrect value!' : 'enter values and press set' : props.value\r\n    return <div className={c.containerStyle}>\r\n        <div>\r\n            <input style={props.maxValue === props.value ? {color:'#F50057'} : {}} className={valueCondition ? c.inputErrorStyle : c.inputTextStyle} value={inputValue}\r\n                   type={props.typeValue ? \"text\" : \"number\"}/>\r\n        </div>\r\n        <div>\r\n            <UniversalButton\r\n                value={props.value}\r\n                title={'inc'}\r\n                disabled={props.value === props.maxInputValue || props.typeValue}\r\n                universalFunction={props.buttonIncFunction}\r\n            />\r\n            <UniversalButton\r\n                disabled={props.typeValue}\r\n                value={props.value}\r\n                title={'reset'}\r\n                universalFunction={props.buttonResetFunction}\r\n            />\r\n            <UniversalButton\r\n                title={'Set'}\r\n                universalFunction={() => {props.setShowCounter(true)}}\r\n            />\r\n        </div>\r\n\r\n    </div>\r\n\r\n}","import React from 'react'\r\nimport {UniversalButton} from \"./UniversalButton\";\r\nimport s from './Settings.module.css'\r\n\r\ntype PropsType = {\r\n    value:number,\r\n    maxValue: number,\r\n    startValue: number,\r\n    addMaxValue: (e: React.ChangeEvent<HTMLInputElement>) => void,\r\n    addStartValue: (e: React.ChangeEvent<HTMLInputElement>) => void,\r\n    buttonOnClick: () => void\r\n}\r\nconst spanStyle: React.CSSProperties = {color:'#F50057', fontWeight:'bold',paddingLeft:'18px'}\r\n\r\nexport const Settings = (props: PropsType) => {\r\n    return <div>\r\n        <div>\r\n            <span style={spanStyle}>Max value</span><input  className={props.maxValue <= props.startValue ?  s.inputErrorStyle : s.inputTextStyle}\r\n                                          value={props.maxValue} onChange={props.addMaxValue} type=\"number\"/>\r\n        </div>\r\n        <div>\r\n            <span style={spanStyle}>Min value</span><input\r\n            className={props.startValue >= props.maxValue || props.startValue < 0 ? s.inputErrorStyle : s.inputTextStyle}\r\n            value={props.startValue} onChange={props.addStartValue} type='number'/>\r\n        </div>\r\n        <div>\r\n            <UniversalButton title={'Set'} disabled={props.maxValue <= props.startValue || props.startValue < 0}\r\n                             universalFunction={props.buttonOnClick}/>\r\n        </div>\r\n    </div>\r\n}","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {Counter} from \"./Counter\";\nimport {Settings} from \"./Settings\";\nimport {Grid, Paper} from \"@material-ui/core\";\n\n\nfunction App() {\n    const [startValue, setStartValue] = useState<number>(0)\n    const [value, setValue] = useState<number>(0)\n    const [maxValue, setMaxValue] = useState<number>(5)\n    const [maxInputValue, setMaxInputValue] = useState<number>(maxValue)\n    const [typeValue, setTypeValue] = useState<boolean>(false)\n    const [showCounter, setShowCounter] = useState<boolean>(true)\n\n    useEffect(() => {\n        const valueAsString = localStorage.getItem('counterValue')\n        if (valueAsString) {\n            const newValue = JSON.parse(valueAsString)\n            setValue(newValue)\n        }\n    }, [])\n    useEffect(() => {\n        localStorage.setItem('counterValue', JSON.stringify(value))\n    }, [value])\n\n    const buttonIncFunction = () => {\n        setValue(value + 1)\n    }\n    const buttonResetFunction = () => {\n        setValue(startValue)\n    }\n    const addStartValue = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setStartValue(e.currentTarget.valueAsNumber)\n        setTypeValue(true)\n        if (e.currentTarget.valueAsNumber < 0) {\n            setMaxInputValue(value)\n        }\n    }\n    const addMaxValue = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setMaxValue(e.currentTarget.valueAsNumber)\n        setTypeValue(true)\n    }\n    const buttonOnClick = () => {\n        setValue(startValue)\n        setMaxInputValue(maxValue)\n        setTypeValue(false)\n        setShowCounter(!showCounter)\n    }\n\n    return (\n        <div className=\"App\">\n            <Grid justify={'center'} alignItems={'center'} style={{height: '512px'}} container>\n                {showCounter ?\n                    <Paper style={{padding: '30px 0', margin: '30px', backgroundColor: '#90a4ae'}} elevation={3}>\n                        <Grid item>\n                            <Settings maxValue={maxValue} startValue={startValue} addMaxValue={addMaxValue}\n                                      addStartValue={addStartValue} buttonOnClick={buttonOnClick} value={value}/>\n                        </Grid>\n                    </Paper>\n                    : <Paper style={{padding: '40px 0', margin: '30px', backgroundColor: '#90a4ae'}} elevation={3}>\n                        <Grid item>\n                            <Counter\n                                maxInputValue={maxInputValue}\n                                maxValue={maxValue}\n                                value={value}\n                                setValue={setValue}\n                                buttonIncFunction={buttonIncFunction}\n                                buttonResetFunction={buttonResetFunction}\n                                startValue={startValue}\n                                typeValue={typeValue}\n                                setShowCounter={setShowCounter}\n                            />\n                        </Grid>\n                    </Paper>}\n            </Grid>\n        </div>\n\n\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}